// Generated by CoffeeScript 2.6.0
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, PostgreSQLClient, PostgreSQLRunner, SQLRunner, Util, fs, path,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..', '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLRunner = require(path.join(LIB_DIR, 'sql-runner')).SQLRunner;

  PostgreSQLClient = require(path.join(LIB_DIR, 'postgresql-client')).PostgreSQLClient;

  Util = require(path.join(LIB_DIR, 'util')).Util;

  PostgreSQLRunner = class PostgreSQLRunner extends SQLRunner {
    constructor(connect_string, options) {
      var client;
      super();
      this.set_client = this.set_client.bind(this);
      this._get_options = this._get_options.bind(this);
      this._handle_argv = this._handle_argv.bind(this);
      this._stringify_results = this._stringify_results.bind(this);
      if ((connect_string != null) && typeof connect_string === 'object' && (options == null)) {
        options = connect_string;
        connect_string = null;
      }
      client = null;
      if (connect_string != null) {
        client = new PostgreSQLClient(connect_string);
      }
      this._init(client, options);
    }

    set_client(client) {
      boundMethodCheck(this, PostgreSQLRunner);
      if (client.execute == null) {
        client = new PostgreSQLClient(client);
      }
      return super.set_client(client);
    }

    _get_options(additional = {}) {
      var pg_opts;
      boundMethodCheck(this, PostgreSQLRunner);
      pg_opts = {
        d: {
          alias: 'db',
          describe: "Databse connect string."
        }
      };
      return super._get_options(Util.merge(pg_opts, additional));
    }

    _handle_argv(argv) {
      boundMethodCheck(this, PostgreSQLRunner);
      if (argv.db != null) {
        this.set_client(argv.db);
      }
      return super._handle_argv(argv);
    }

    _stringify_results(...results) {
      var ref;
      boundMethodCheck(this, PostgreSQLRunner);
      if ((results != null ? (ref = results[0]) != null ? ref.rows : void 0 : void 0) != null) {
        return JSON.stringify(results[0].rows, null, 2);
      } else {
        return super._stringify_results(...results);
      }
    }

  };

  exports.PostgreSQLRunner = PostgreSQLRunner;

  if (require.main === module) {
    (new PostgreSQLRunner()).main();
  }

  // EXAMPLE

//   echo "SELECT 3+5 as FOO" | coffee lib/bin/postgresql-runner.coffee --db postgres://sqlclient_test_user:password@localhost/sqlclient_test_db

// or

//   echo "SELECT 3+5 as FOO" | ./bin/postgresql-runner --db postgres://sqlclient_test_user:password@localhost/sqlclient_test_db

}).call(this);
